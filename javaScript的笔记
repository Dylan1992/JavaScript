在浏览器的console中显示日志/对象：
var log = console.log.bind('console');

log(XX);  xx为需要打印的对象 例如 var image = new Image(); 
                                image.src = "xx\xx\xx";
                                log(image);
        则在浏览器运行时会在console中打印出image相关内容

javascript中对于函数主要有函数声明和函数表达试两种用法：
        //函数声明
        function sum(num1,num2){
                return num1+num2
        }
        //函数表达式
        var sum = function(num1,num2){
                return num1 + num2
        }
        在使用过程中，函数声明会优先被解释器解释 也就是说函数声明的函数在之前代码行被调用不会报错


js中不区分类和实例，所有对象都是实例
js中存在一种继承方式（在高版本ie中） 使用.__proto__ 来使一个对象继承另一个对象。
  var Student = {
    name:"xiaoming",
    age:"18",
    run:function(){
      console.log(this.name + " is running");
    }
  }
  var xiaohong = {
    name:"xiaohong"
  }
  
  xiaohong.__proto__ = student;
  Student.name; //xiaoming
  xiaohong.name; //xiaohong
  xiaohong.run(); //xiaohong is running
 
 实际使用中通常不建议使用.__protp__ 而是利用Obkect.create()方法传入一个原型对象，然后基于该原型对象创建新对象：
  function createNew(name){
    var newO = Object.create(Student);
    newO.name = name;
    return newO;
  }
  var xiaohong = createNew("xiaohong");
  xiaohong.run(); // xiaohong is running
  xiaohong.__proto__ = Student; //true



js中对于创建方法时 有的有return 有的没有是因为对于方法实例化为对象是是否加new
例：
function Student(name){
  this.name = name;
  this.age - age;
  this.hello = function(){
    alert(this.name + "say hello!")
  }
}
Student xiaoming = new Student("xiaoming");
xiaoming.name; // xiaoming
xiaoming.hello(); // xiaoming say hello!
对于创建对象时写了new 则该函数是构造函数 ，它绑定对象指向新创建的对象，并默认返回this，也就是说不用在最后增加return this；
